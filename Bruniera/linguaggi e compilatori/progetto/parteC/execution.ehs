
myMap snd (myFilt (f 0@Float) (myZip (error "ERROR":"do") [(2,'a')..]))


myMap snd (myFilt (f 0@Float) (myZip (: (error "ERROR") "do") (enumFrom@(2@Float,'a'@Char))))

case (myFilt (f 0@Float) (myZip (: (error "ERROR") "do") (enumFrom@(Float,Char) (2@Float,'a'@Char)))) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (case (myZip (: (error "ERROR") "do") (enumFrom@(Float,Char) (2@Float,'a'@Char)))of
        [] -> []
        : x xs -> if (f'[f 0@Float] x) then (: x ys[myFilt f' xs]) else ys
    ) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (case (case (: (error "ERROR") "do") of 
            [] -> case (enumFrom@(Float,Char) (2@Float,'a'@Char)) of
                [] -> []
                : y ys -> []
                _ -> error "ouch !!"
            : x xs -> case (enumFrom@(Float,Char) (2@Float,'a'@Char)) of
                [] -> []
                : y ys -> : (x,y) (myZip xs ys)
                _ -> error "ouch !!"
            _ -> error "ouch !!"
           ) of
        [] -> []
        : x xs -> if (f'[f 0@Float] x) then (: x ys[myFilt f' xs]) else ys
     ) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (case (case (enumFrom@(Float,Char) (2@Float,'a'@Char)) of
            [] -> []
            : y ys -> : ((error "ERROR"), y) (myZip "do" ys)
            _ -> error "ouch !!"
           ) of
        [] -> []
        : x xs -> if (f'[f 0@Float] x) then (: x ys[myFilt f' xs]) else ys
     ) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (case (case (case (2@Float,'a'@Char)of 
                    (x, c) -> : a[(*@Float x 1.1@Float , succ@Char c)] (enumFrom@(Float,Char) a)
                 ) of
            [] -> []
            : y ys -> : ((error "ERROR"), y) (myZip "do" ys)
            _ -> error "ouch !!"
           ) of
        [] -> []
        : x xs -> if (f'[f 0@Float] x) then (: x ys[myFilt f' xs]) else ys
     ) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (case (case (: a[(*@Float 2@Float 1.1@Float , succ@Char 'a'@Char)] (enumFrom@(Float,Char) a)) of
            [] -> []
            : y ys -> : ((error "ERROR"), y) (myZip "do" ys)
            _ -> error "ouch !!"
           ) of
        [] -> []
        : x xs -> if (f'[f 0@Float] x) then (: x ys[myFilt f' xs]) else ys
     ) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (case (: ((error "ERROR"), a[(*@Float 2@Float 1.1@Float , succ@Char 'a'@Char)]) (myZip "do" (enumFrom@(Float,Char) a))) of
        [] -> []
        : x xs -> if (f'[f 0@Float] x) then (: x ys[myFilt f' xs]) else ys
     ) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (if (f'[f 0@Float] x[((error "ERROR"), a[(*@Float 2@Float 1.1@Float , succ@Char 'a'@Char)])]) then
         (: x ys[myFilt f' (myZip "do" (enumFrom@(Float,Char) a))]) 
      else
         ys) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (if (f'[(\ y' -> case y' of
               (_ ,y'') -> case y'' of
                  ( y , _ ) -> <@Float 0@Float y
            )] x[((error "ERROR"), a[(*@Float 2@Float 1.1@Float , succ@Char 'a'@Char)])])
      then
         (: x ys[myFilt f' (myZip "do" (enumFrom@(Float,Char) a))]) 
      else
         ys) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []


{-
ATTENZIONE!

per leggibilitÃ  continuerÃ² ad usare f' come placeholder per:
\ y' -> case y' of
   (_ ,y'') -> case y'' of
        ( y , _ ) -> <@Float 0@Float y

sarebbe la valutazione di (f 0)
-}

case (if (f'[(\ y' -> case y' of
               (_ ,y'') -> case y'' of
                  ( y , _ ) -> <@Float 0@Float y
            )] x[((error "ERROR"), (2.2@Float, 'b'@Char))])
      then
         (: x ys[myFilt f' (myZip "do" (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)))]) 
      else
         ys) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (if (case ((error "ERROR"), (2.2@Float, 'b'@Char)) of
            (_ ,y'') -> case y'' of
               ( y , _ ) -> <@Float 0@Float y
         )
      then
         (: ((error "ERROR"), (2.2@Float, 'b'@Char)) ys[myFilt f' (myZip "do" (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)))]) 
      else
         ys) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (if (case (2.2@Float, 'b'@Char) of
            ( y , _ ) -> <@Float 0@Float y
         )
      then
         (: ((error "ERROR"), (2.2@Float, 'b'@Char)) ys[myFilt f' (myZip "do" (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)))]) 
      else
         ys) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (if (<@Float 0@Float 2.2@Float)
      then
         (: ((error "ERROR"), (2.2@Float, 'b'@Char)) ys[myFilt f' (myZip "do" (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)))]) 
      else
         ys) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (if True
      then
         (: ((error "ERROR"), (2.2@Float, 'b'@Char)) ys[myFilt f' (myZip "do" (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)))]) 
      else
         ys) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

case (: ((error "ERROR"), (2.2@Float, 'b'@Char)) ys[myFilt f' (myZip "do" (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)))]) of
        : x xs -> : (snd x) (myMap snd xs)
        [] -> []

: (snd ((error "ERROR"), (2.2@Float, 'b'@Char)))
(myMap snd (myFilt f' (myZip "do" (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)))))

{-
viene forzata la valutazione completa
-}

: (2.2@Float, 'b'@Char)
(myMap snd (myFilt f' (myZip "do" (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)))))

: (2.2@Float, 'b'@Char)
(case (myFilt f' (myZip "do" (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)))) of
   : x xs -> : (snd x) (myMap snd xs))

: (2.2@Float, 'b'@Char)
(case (case (myZip "do" (enumFrom@(Float,Char) (2.2@Float, 'b'@Char))) of
         [] -> []
         : x xs -> if (f' x) then (: x ys[myFilt f' xs]) else ys
      ) of
   : x xs -> : (snd x) (myMap snd xs))

: (2.2@Float, 'b'@Char)
(case (case (case "do" of
               [] -> case (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)) of
                  [] -> []
                  : y ys -> []
                  _ -> error "ouch !!"
               : x xs -> case (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)) of
                  [] -> []
                  : y ys -> (x,y) (myZip xs ys)
                  _ -> error "ouch !!"
               _ -> error "ouch !!"
            ) of
         [] -> []
         : x xs -> if (f' x) then (: x ys[myFilt f' xs]) else ys
      ) of
   : x xs -> : (snd x) (myMap snd xs))

: (2.2@Float, 'b'@Char)
(case (case (case (enumFrom@(Float,Char) (2.2@Float, 'b'@Char)) of
                  [] -> []
                  : y ys -> ('d'@Char, y) (myZip "o" ys)
                  _ -> error "ouch !!"
            ) of
         [] -> []
         : x xs -> if (f' x) then (: x ys[myFilt f' xs]) else ys
      ) of
   : x xs -> : (snd x) (myMap snd xs))

: (2.2@Float, 'b'@Char)
(case (case (case (case (2.2@Float, 'b'@Char) of
                     (x, c) -> : a[(*@Float x 1.1@Float , succ@Char c)] (enumFrom@(Float,Char) a)
                  ) of
                  [] -> []
                  : y ys -> ('d'@Char, y) (myZip "o" ys)
                  _ -> error "ouch !!"
            ) of
         [] -> []
         : x xs -> if (f' x) then (: x ys[myFilt f' xs]) else ys
      ) of
   : x xs -> : (snd x) (myMap snd xs))
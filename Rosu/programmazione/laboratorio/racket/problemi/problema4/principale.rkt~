;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname principale) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; Razvan Rosu
; Balanced Ternary Representation

; restituisce la rappresentazione non vuota equivalente in cui le eventuali cifre zero in testa, ininfluenti, sono rimosse
(define normalized-btr ; string
  (lambda (btr) ; string
    (let ([next-str-length (sub1 (string-length btr))])
      (if (< next-str-length 0)
          (string #\.)
          (let ([msd (string-ref btr 0)]
                [next-string (substring btr 1 (string-length btr))])
            (if (char=? msd #\.)
                (normalized-btr next-string)
                btr)
            )
          )
      )
    ))

; restituisce la cifra meno significativa o 0 se l'argomento è la stringa vuota
(define lsd ; char
  (lambda (btr) ; string
    (let ([lsd-position (sub1 (string-length btr))])
      (if (< lsd-position 0)
          #\.
          (string-ref btr lsd-position))
      )
    ))

; restituisce la parte che precede l'ultima cifra oppure la stringa vuota se la stringa è vuota
(define head ; string
  (lambda (btr) ; string
    (let ([lsd-position (sub1 (string-length btr))])
      (if (< lsd-position 0)
          (string)
          (substring btr 0 lsd-position)))
    ))
       

; converte i numeri scritti in notazione binaria in numeri interi
(define btr-val ; integer
  (lambda (btr) ; string
    (let ([next-string-length (sub1 (string-length btr))])
      (let ([prefix (substring btr 0 next-string-length)]
            [lsd (string-ref btr next-string-length)])
        (if (= next-string-length 0)
            (btd-val lsd)
            (+ (* 3 (btr-val prefix)) (btd-val lsd))
            )))
    ))

(define btr-carry-sum
  (lambda (btr-a btr-b carry)

(define btd-val
  (lambda (btd)
    (cond
      ((char=? #\- btd) -1)
      ((char=? #\+ btd) +1)
      ((char=? #\. btd) 0))
    ))